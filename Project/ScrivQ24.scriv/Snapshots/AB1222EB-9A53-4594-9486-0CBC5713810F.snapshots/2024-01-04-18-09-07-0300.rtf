{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 UbuntuMono-Regular;}
{\colortbl;\red255\green255\blue255;\red128\green128\blue128;}
{\*\expandedcolortbl;;\csgray\c57300;}
\deftab720
\pard\pardeftab720\sb40\sa40\partightenfactor0

\f0\fs24 \cf2 <$Scr_Ps::0>
\f1\fs20 # Place your Python code here, see {\field{\*\fldinst{HYPERLINK "https://quarto.org/docs/computations/python.html"}}{\fldrslt https://quarto.org/docs/computations/python.html}} \
\pard\tx0\tx0\tx567\tx1134\tx1701\pardeftab720\sl288\slmult1\pardirnatural\qj\partightenfactor0

\f0\fs24 \cf0 <!$Scr_Ps::0><$Scr_Ps::1>
\f1\fs20 import unicodedata\
\
# Primeira demonstra\'e7\'e3o: NFD e NFC\
\
characters = '\uc0\u7940 '\
print(characters+'  \\n')\
\
for character in characters:\
    print(hex(ord(character)),character,unicodedata.name(character)+'  \\n') \
\
# Em seguida, obteremos sua forma decomposta com NFD:\
for character in unicodedata.normalize('NFD', characters):\
    print(hex(ord(character)),character,unicodedata.name(character)+'  \\n')\
\
# E sua forma decomposta e recomposta com NF\
for character in unicodedata.normalize('NFC', characters):\
    print(hex(ord(character)),character,unicodedata.name(character)+'  \\n') \
\

\f0\fs24 <!$Scr_Ps::1>}