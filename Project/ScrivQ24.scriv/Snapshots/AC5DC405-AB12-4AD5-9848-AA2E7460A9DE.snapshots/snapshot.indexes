<?xml version="1.0" encoding="UTF-8"?>
<SnapshotIndexes Version="1.0" BinderUUID="AC5DC405-AB12-4AD5-9848-AA2E7460A9DE">
    <Snapshot Date="2022-10-15 17:53:56 -0300">
        <Title>Untitled (Save)</Title>
        <Text>#| output: asis
#| echo: true
#| code-overflow: wrap
#| code-line-numbers: true

# Place your Python code here, see https://quarto.org/docs/computations/python.html 

import unicodedata

# Primeira demonstração: NFD e NFC

characters = 'ἄ'
for character in characters:
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 

# Em seguida, obteremos sua forma decomposta com NFD:
for character in unicodedata.normalize('NFD', characters):
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower())

# E sua forma decomposta e recomposta com NF
for character in unicodedata.normalize('NFC', characters):
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 

</Text>
    </Snapshot>
    <Snapshot Date="2022-10-15 20:43:08 -0300">
        <Title>Untitled (Save)</Title>
        <Text>#| output: asis
#| echo: fenced

import unicodedata

# Primeira demonstração: NFD e NFC

characters = 'ἄ'
print(characters+'  \n')

for character in characters:
    print(hex(ord(character)),character,unicodedata.name(character)+'  \n') 

# Em seguida, obteremos sua forma decomposta com NFD:
for character in unicodedata.normalize('NFD', characters):
    print(hex(ord(character)),character,unicodedata.name(character)+'  \n')

# E sua forma decomposta e recomposta com NF
for character in unicodedata.normalize('NFC', characters):
    print(hex(ord(character)),character,unicodedata.name(character)+'  \n') 

</Text>
    </Snapshot>
    <Snapshot Date="2022-10-15 15:31:32 -0300">
        <Title>Untitled (Save)</Title>
        <Text>#| label: fig-label
#| fig-cap: Place your figure caption here.
# Place your Python code here, see https://quarto.org/docs/computations/python.html 

#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Versão pretty-print.

import unicodedata

print('=================================')
print('Primeira demonstração: NFD e NFC')
print('=================================\n')

print('Escolhemos um caractere composto e obtermos seu código no padrão Unicode e seu nome de acordo com a tabela Unicode:\n')
characters = 'ἄ'
for character in characters:
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 

print('\nEm seguida, obteremos sua forma decomposta com NFD:\n')
for character in unicodedata.normalize('NFD', characters):
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower())

print('\nE sua forma composta com NFC (obs.: a forma é decomposta antes de ser recomposta):\n')
for character in unicodedata.normalize('NFC', characters):
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 


print('\n\n===================================')
print('Segunda demonstração: oxia e tonos')
print('===================================\n')

print('Selecionamos três caracteres:\n')
characters = 'άήé'
for character in characters:
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 

print('\nE obtemos a forma decomposta de cada um. Observe como, no processo de decomposição (NFD), todos os acentos são normalizados em acentos agudo.\n')
decomposed_str = unicodedata.normalize('NFD', characters)
for character in decomposed_str:
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower())  

print('\nEm seguida, recompomos os caracteres acima utilizando a normalização canônica de composição (NFC).\n')
recomposed_str = unicodedata.normalize('NFC', decomposed_str)
for character in recomposed_str:
    print(hex(ord(character)).upper(),character,unicodedata.name(character).lower()) 


print('\n\n===================================')
print('Terceira demonstração: NFKD e NFKC*')
print('===================================\n')
# * Ausente no artigo

print('A normalização de compatibilidade transforma caracteres em formas compatíveis, mas **não equivalentes**. Isso significa que, partindo de uma determinada forma, não é mais possível retornar a ela depois que a modificação é feita.\n')
characters = '™'

print('™ normalizado com NFKD:', unicodedata.normalize('NFKD', characters))
print('™ normalizado com NFKC:', unicodedata.normalize('NFKC', characters))

</Text>
    </Snapshot>
</SnapshotIndexes>